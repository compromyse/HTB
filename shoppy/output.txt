# HELP go_gc_cycles_automatic_gc_cycles_total Count of completed GC cycles generated by the Go runtime.
# TYPE go_gc_cycles_automatic_gc_cycles_total counter
go_gc_cycles_automatic_gc_cycles_total 35
# HELP go_gc_cycles_forced_gc_cycles_total Count of completed GC cycles forced by the application.
# TYPE go_gc_cycles_forced_gc_cycles_total counter
go_gc_cycles_forced_gc_cycles_total 0
# HELP go_gc_cycles_total_gc_cycles_total Count of all completed GC cycles.
# TYPE go_gc_cycles_total_gc_cycles_total counter
go_gc_cycles_total_gc_cycles_total 35
# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile="0"} 3.7404e-05
go_gc_duration_seconds{quantile="0.25"} 0.000104583
go_gc_duration_seconds{quantile="0.5"} 0.000168187
go_gc_duration_seconds{quantile="0.75"} 0.000382147
go_gc_duration_seconds{quantile="1"} 0.001181568
go_gc_duration_seconds_sum 0.010576469
go_gc_duration_seconds_count 35
# HELP go_gc_heap_allocs_by_size_bytes_total Distribution of heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_allocs_by_size_bytes_total histogram
go_gc_heap_allocs_by_size_bytes_total_bucket{le="8.999999999999998"} 6184
go_gc_heap_allocs_by_size_bytes_total_bucket{le="24.999999999999996"} 51497
go_gc_heap_allocs_by_size_bytes_total_bucket{le="64.99999999999999"} 70644
go_gc_heap_allocs_by_size_bytes_total_bucket{le="144.99999999999997"} 83373
go_gc_heap_allocs_by_size_bytes_total_bucket{le="320.99999999999994"} 87336
go_gc_heap_allocs_by_size_bytes_total_bucket{le="704.9999999999999"} 88520
go_gc_heap_allocs_by_size_bytes_total_bucket{le="1536.9999999999998"} 89148
go_gc_heap_allocs_by_size_bytes_total_bucket{le="3200.9999999999995"} 89494
go_gc_heap_allocs_by_size_bytes_total_bucket{le="6528.999999999999"} 89672
go_gc_heap_allocs_by_size_bytes_total_bucket{le="13568.999999999998"} 89708
go_gc_heap_allocs_by_size_bytes_total_bucket{le="27264.999999999996"} 89733
go_gc_heap_allocs_by_size_bytes_total_bucket{le="+Inf"} 89759
go_gc_heap_allocs_by_size_bytes_total_sum 9.494552e+06
go_gc_heap_allocs_by_size_bytes_total_count 89759
# HELP go_gc_heap_allocs_bytes_total Cumulative sum of memory allocated to the heap by the application.
# TYPE go_gc_heap_allocs_bytes_total counter
go_gc_heap_allocs_bytes_total 9.494552e+06
# HELP go_gc_heap_allocs_objects_total Cumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_allocs_objects_total counter
go_gc_heap_allocs_objects_total 89759
# HELP go_gc_heap_frees_by_size_bytes_total Distribution of freed heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_frees_by_size_bytes_total histogram
go_gc_heap_frees_by_size_bytes_total_bucket{le="8.999999999999998"} 3307
go_gc_heap_frees_by_size_bytes_total_bucket{le="24.999999999999996"} 30919
go_gc_heap_frees_by_size_bytes_total_bucket{le="64.99999999999999"} 38048
go_gc_heap_frees_by_size_bytes_total_bucket{le="144.99999999999997"} 47767
go_gc_heap_frees_by_size_bytes_total_bucket{le="320.99999999999994"} 49795
go_gc_heap_frees_by_size_bytes_total_bucket{le="704.9999999999999"} 50449
go_gc_heap_frees_by_size_bytes_total_bucket{le="1536.9999999999998"} 50858
go_gc_heap_frees_by_size_bytes_total_bucket{le="3200.9999999999995"} 50987
go_gc_heap_frees_by_size_bytes_total_bucket{le="6528.999999999999"} 51075
go_gc_heap_frees_by_size_bytes_total_bucket{le="13568.999999999998"} 51094
go_gc_heap_frees_by_size_bytes_total_bucket{le="27264.999999999996"} 51107
go_gc_heap_frees_by_size_bytes_total_bucket{le="+Inf"} 51123
go_gc_heap_frees_by_size_bytes_total_sum 4.950472e+06
go_gc_heap_frees_by_size_bytes_total_count 51123
# HELP go_gc_heap_frees_bytes_total Cumulative sum of heap memory freed by the garbage collector.
# TYPE go_gc_heap_frees_bytes_total counter
go_gc_heap_frees_bytes_total 4.950472e+06
# HELP go_gc_heap_frees_objects_total Cumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_frees_objects_total counter
go_gc_heap_frees_objects_total 51123
# HELP go_gc_heap_goal_bytes Heap size target for the end of the GC cycle.
# TYPE go_gc_heap_goal_bytes gauge
go_gc_heap_goal_bytes 8.570488e+06
# HELP go_gc_heap_objects_objects Number of objects, live or unswept, occupying heap memory.
# TYPE go_gc_heap_objects_objects gauge
go_gc_heap_objects_objects 38636
# HELP go_gc_heap_tiny_allocs_objects_total Count of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.
# TYPE go_gc_heap_tiny_allocs_objects_total counter
go_gc_heap_tiny_allocs_objects_total 11837
# HELP go_gc_pauses_seconds_total Distribution individual GC-related stop-the-world pause latencies.
# TYPE go_gc_pauses_seconds_total histogram
go_gc_pauses_seconds_total_bucket{le="-5e-324"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999999e-10"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999999e-09"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999998e-08"} 0
go_gc_pauses_seconds_total_bucket{le="1.0239999999999999e-06"} 0
go_gc_pauses_seconds_total_bucket{le="1.0239999999999999e-05"} 32
go_gc_pauses_seconds_total_bucket{le="0.00010239999999999998"} 45
go_gc_pauses_seconds_total_bucket{le="0.0010485759999999998"} 66
go_gc_pauses_seconds_total_bucket{le="0.010485759999999998"} 70
go_gc_pauses_seconds_total_bucket{le="0.10485759999999998"} 70
go_gc_pauses_seconds_total_bucket{le="+Inf"} 70
go_gc_pauses_seconds_total_sum NaN
go_gc_pauses_seconds_total_count 70
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 26
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version="go1.18.1"} 1
# HELP go_memory_classes_heap_free_bytes Memory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime's estimate of free address space that is backed by physical memory.
# TYPE go_memory_classes_heap_free_bytes gauge
go_memory_classes_heap_free_bytes 524288
# HELP go_memory_classes_heap_objects_bytes Memory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.
# TYPE go_memory_classes_heap_objects_bytes gauge
go_memory_classes_heap_objects_bytes 4.54408e+06
# HELP go_memory_classes_heap_released_bytes Memory that is completely free and has been returned to the underlying system. This metric is the runtime's estimate of free address space that is still mapped into the process, but is not backed by physical memory.
# TYPE go_memory_classes_heap_released_bytes gauge
go_memory_classes_heap_released_bytes 4.866048e+06
# HELP go_memory_classes_heap_stacks_bytes Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.
# TYPE go_memory_classes_heap_stacks_bytes gauge
go_memory_classes_heap_stacks_bytes 720896
# HELP go_memory_classes_heap_unused_bytes Memory that is reserved for heap objects but is not currently used to hold heap objects.
# TYPE go_memory_classes_heap_unused_bytes gauge
go_memory_classes_heap_unused_bytes 1.9276e+06
# HELP go_memory_classes_metadata_mcache_free_bytes Memory that is reserved for runtime mcache structures, but not in-use.
# TYPE go_memory_classes_metadata_mcache_free_bytes gauge
go_memory_classes_metadata_mcache_free_bytes 13200
# HELP go_memory_classes_metadata_mcache_inuse_bytes Memory that is occupied by runtime mcache structures that are currently being used.
# TYPE go_memory_classes_metadata_mcache_inuse_bytes gauge
go_memory_classes_metadata_mcache_inuse_bytes 2400
# HELP go_memory_classes_metadata_mspan_free_bytes Memory that is reserved for runtime mspan structures, but not in-use.
# TYPE go_memory_classes_metadata_mspan_free_bytes gauge
go_memory_classes_metadata_mspan_free_bytes 0
# HELP go_memory_classes_metadata_mspan_inuse_bytes Memory that is occupied by runtime mspan structures that are currently being used.
# TYPE go_memory_classes_metadata_mspan_inuse_bytes gauge
go_memory_classes_metadata_mspan_inuse_bytes 97920
# HELP go_memory_classes_metadata_other_bytes Memory that is reserved for or used to hold runtime metadata.
# TYPE go_memory_classes_metadata_other_bytes gauge
go_memory_classes_metadata_other_bytes 5.246296e+06
# HELP go_memory_classes_os_stacks_bytes Stack memory allocated by the underlying operating system.
# TYPE go_memory_classes_os_stacks_bytes gauge
go_memory_classes_os_stacks_bytes 0
# HELP go_memory_classes_other_bytes Memory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.
# TYPE go_memory_classes_other_bytes gauge
go_memory_classes_other_bytes 617672
# HELP go_memory_classes_profiling_buckets_bytes Memory that is used by the stack trace hash map used for profiling.
# TYPE go_memory_classes_profiling_buckets_bytes gauge
go_memory_classes_profiling_buckets_bytes 5504
# HELP go_memory_classes_total_bytes All memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.
# TYPE go_memory_classes_total_bytes gauge
go_memory_classes_total_bytes 1.8565904e+07
# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.
# TYPE go_memstats_alloc_bytes gauge
go_memstats_alloc_bytes 4.54408e+06
# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.
# TYPE go_memstats_alloc_bytes_total counter
go_memstats_alloc_bytes_total 9.494552e+06
# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.
# TYPE go_memstats_buck_hash_sys_bytes gauge
go_memstats_buck_hash_sys_bytes 5504
# HELP go_memstats_frees_total Total number of frees.
# TYPE go_memstats_frees_total counter
go_memstats_frees_total 62960
# HELP go_memstats_gc_cpu_fraction The fraction of this program's available CPU time used by the GC since the program started.
# TYPE go_memstats_gc_cpu_fraction gauge
go_memstats_gc_cpu_fraction 0
# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.
# TYPE go_memstats_gc_sys_bytes gauge
go_memstats_gc_sys_bytes 5.246296e+06
# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.
# TYPE go_memstats_heap_alloc_bytes gauge
go_memstats_heap_alloc_bytes 4.54408e+06
# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.
# TYPE go_memstats_heap_idle_bytes gauge
go_memstats_heap_idle_bytes 5.390336e+06
# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.
# TYPE go_memstats_heap_inuse_bytes gauge
go_memstats_heap_inuse_bytes 6.47168e+06
# HELP go_memstats_heap_objects Number of allocated objects.
# TYPE go_memstats_heap_objects gauge
go_memstats_heap_objects 38636
# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.
# TYPE go_memstats_heap_released_bytes gauge
go_memstats_heap_released_bytes 4.866048e+06
# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.
# TYPE go_memstats_heap_sys_bytes gauge
go_memstats_heap_sys_bytes 1.1862016e+07
# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.
# TYPE go_memstats_last_gc_time_seconds gauge
go_memstats_last_gc_time_seconds 1.664074756376479e+09
# HELP go_memstats_lookups_total Total number of pointer lookups.
# TYPE go_memstats_lookups_total counter
go_memstats_lookups_total 0
# HELP go_memstats_mallocs_total Total number of mallocs.
# TYPE go_memstats_mallocs_total counter
go_memstats_mallocs_total 101596
# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.
# TYPE go_memstats_mcache_inuse_bytes gauge
go_memstats_mcache_inuse_bytes 2400
# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.
# TYPE go_memstats_mcache_sys_bytes gauge
go_memstats_mcache_sys_bytes 15600
# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.
# TYPE go_memstats_mspan_inuse_bytes gauge
go_memstats_mspan_inuse_bytes 97920
# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.
# TYPE go_memstats_mspan_sys_bytes gauge
go_memstats_mspan_sys_bytes 97920
# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.
# TYPE go_memstats_next_gc_bytes gauge
go_memstats_next_gc_bytes 8.570488e+06
# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.
# TYPE go_memstats_other_sys_bytes gauge
go_memstats_other_sys_bytes 617672
# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.
# TYPE go_memstats_stack_inuse_bytes gauge
go_memstats_stack_inuse_bytes 720896
# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.
# TYPE go_memstats_stack_sys_bytes gauge
go_memstats_stack_sys_bytes 720896
# HELP go_memstats_sys_bytes Number of bytes obtained from system.
# TYPE go_memstats_sys_bytes gauge
go_memstats_sys_bytes 1.8565904e+07
# HELP go_sched_goroutines_goroutines Count of live goroutines.
# TYPE go_sched_goroutines_goroutines gauge
go_sched_goroutines_goroutines 26
# HELP go_sched_latencies_seconds Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running.
# TYPE go_sched_latencies_seconds histogram
go_sched_latencies_seconds_bucket{le="-5e-324"} 0
go_sched_latencies_seconds_bucket{le="9.999999999999999e-10"} 477
go_sched_latencies_seconds_bucket{le="9.999999999999999e-09"} 477
go_sched_latencies_seconds_bucket{le="9.999999999999998e-08"} 477
go_sched_latencies_seconds_bucket{le="1.0239999999999999e-06"} 2838
go_sched_latencies_seconds_bucket{le="1.0239999999999999e-05"} 3039
go_sched_latencies_seconds_bucket{le="0.00010239999999999998"} 3318
go_sched_latencies_seconds_bucket{le="0.0010485759999999998"} 3342
go_sched_latencies_seconds_bucket{le="0.010485759999999998"} 3349
go_sched_latencies_seconds_bucket{le="0.10485759999999998"} 3349
go_sched_latencies_seconds_bucket{le="+Inf"} 3349
go_sched_latencies_seconds_sum NaN
go_sched_latencies_seconds_count 3349
# HELP go_threads Number of OS threads created.
# TYPE go_threads gauge
go_threads 8
# HELP playbooks_plugin_playbooks_playbook_archived_count Number of playbooks archived since the last launch.
# TYPE playbooks_plugin_playbooks_playbook_archived_count counter
playbooks_plugin_playbooks_playbook_archived_count 0
# HELP playbooks_plugin_playbooks_playbook_created_count Number of playbooks created since the last launch.
# TYPE playbooks_plugin_playbooks_playbook_created_count counter
playbooks_plugin_playbooks_playbook_created_count 0
# HELP playbooks_plugin_playbooks_playbook_restored_count Number of playbooks restored since the last launch.
# TYPE playbooks_plugin_playbooks_playbook_restored_count counter
playbooks_plugin_playbooks_playbook_restored_count 0
# HELP playbooks_plugin_playbooks_playbooks_active_total Total number of active playbooks.
# TYPE playbooks_plugin_playbooks_playbooks_active_total gauge
playbooks_plugin_playbooks_playbooks_active_total 0
# HELP playbooks_plugin_process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE playbooks_plugin_process_cpu_seconds_total counter
playbooks_plugin_process_cpu_seconds_total 1.22
# HELP playbooks_plugin_process_max_fds Maximum number of open file descriptors.
# TYPE playbooks_plugin_process_max_fds gauge
playbooks_plugin_process_max_fds 49152
# HELP playbooks_plugin_process_open_fds Number of open file descriptors.
# TYPE playbooks_plugin_process_open_fds gauge
playbooks_plugin_process_open_fds 16
# HELP playbooks_plugin_process_resident_memory_bytes Resident memory size in bytes.
# TYPE playbooks_plugin_process_resident_memory_bytes gauge
playbooks_plugin_process_resident_memory_bytes 3.4983936e+07
# HELP playbooks_plugin_process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE playbooks_plugin_process_start_time_seconds gauge
playbooks_plugin_process_start_time_seconds 1.66407074332e+09
# HELP playbooks_plugin_process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE playbooks_plugin_process_virtual_memory_bytes gauge
playbooks_plugin_process_virtual_memory_bytes 7.42883328e+08
# HELP playbooks_plugin_process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.
# TYPE playbooks_plugin_process_virtual_memory_max_bytes gauge
playbooks_plugin_process_virtual_memory_max_bytes 1.8446744073709552e+19
# HELP playbooks_plugin_runs_followers_active_total Total number of active followers, including duplicates.
# TYPE playbooks_plugin_runs_followers_active_total gauge
playbooks_plugin_runs_followers_active_total 0
# HELP playbooks_plugin_runs_participants_active_total Total number of active participants (i.e. members of the playbook run channel when the run is active), including duplicates
# TYPE playbooks_plugin_runs_participants_active_total gauge
playbooks_plugin_runs_participants_active_total 0
# HELP playbooks_plugin_runs_reminders_outstanding_total Total number of outstanding reminders.
# TYPE playbooks_plugin_runs_reminders_outstanding_total gauge
playbooks_plugin_runs_reminders_outstanding_total 0
# HELP playbooks_plugin_runs_retros_outstanding_total Total number of outstanding retrospective reminders.
# TYPE playbooks_plugin_runs_retros_outstanding_total gauge
playbooks_plugin_runs_retros_outstanding_total 0
# HELP playbooks_plugin_runs_runs_active_total Total number of active runs.
# TYPE playbooks_plugin_runs_runs_active_total gauge
playbooks_plugin_runs_runs_active_total 0
# HELP playbooks_plugin_runs_runs_created_count Number of runs created since the last launch.
# TYPE playbooks_plugin_runs_runs_created_count counter
playbooks_plugin_runs_runs_created_count 0
# HELP playbooks_plugin_runs_runs_finished_count Number of runs finished since the last launch.
# TYPE playbooks_plugin_runs_runs_finished_count counter
playbooks_plugin_runs_runs_finished_count 0
# HELP playbooks_plugin_system_errors_count Number of errors since the last launch.
# TYPE playbooks_plugin_system_errors_count counter
playbooks_plugin_system_errors_count 0
# HELP playbooks_plugin_system_playbook_instance_info Instance information for Playbook.
# TYPE playbooks_plugin_system_playbook_instance_info gauge
playbooks_plugin_system_playbook_instance_info{Version="1.29.1"} 1